#!/usr/bin/env python3

from typing import Tuple
import rospy
import RPi.GPIO as GPIO
from control.Move import Move
from sensor_msgs.msg import Range 
import time

class Controller():
    def __init__(self):
        rospy.init_node("controller")
        self.move = Move()
        self.wall = "left"
        self.direction = "forward"
        self.front_range = 0
        self.right_range = 0
        self.left_range = 0
        self.back_range = 0
        self.phase1 = True
        self.target_detected = False
        self.target_radius = 0
        self.target_distance = 0
        self.forward_distance = 25
        self.side_distance = 10
        self.turning = False
        self.delay = 0.5
        self.sec = 0
        rospy.Subscriber('/robot/sensors/ultrasonics',Range, self.ultrasonics)

    def ultrasonics(self,sensorData):
        if sensorData.header.frame_id == "front":
            self.front_range = sensorData.range
        
        if sensorData.header.frame_id == "right":
            self.right_range = sensorData.range
        
        if sensorData.header.frame_id == "left":
            self.left_range = sensorData.range
        
        if sensorData.header.frame_id == "back":
            self.back_range = sensorData.range
        
        print("F: ", self.front_range, "L: ", self.left_range, "R: ",self.right_range)
        if self.phase1:
            if (self.front_range > self.forward_distance) or not self.front_range:
                if self.right_range > self.side_distance and self.left_range > self.side_distance:
                    self.move.forward()
                    print("action 1")
                elif self.right_range < self.side_distance:
                    self.move.left()
                    print("action 2")
                elif  self.left_range < self.side_distance:
                    self.move.right()
                    print("action 3")

            if self.front_range < self.forward_distance and self.front_range:
                if self.right_range < self.left_range and self.right_range and self.left_range:
                    self.move.left()
                    print("action 4")
                elif self.right_range > self.left_range and self.right_range and self.left_range:
                    self.move.right()
                    print("action 5")
        else:
            self.phase1 = False
            self.allign()
        
            
    def allign(self):
        pass
        

if __name__ == '__main__':
    try:
        my_robot = Controller()
        rospy.spin()
    
    except KeyboardInterrupt: # If CTRL+C is pressed, exit cleanly:
        print("Keyboard interrupt")
    finally:
        GPIO.cleanup() # clear pin config 
